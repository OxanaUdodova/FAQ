HW
Client_Server
1) Прочитать про клиент-серверную архитектуру
2) Что такое HTTP и HTTPS
HTTP (от англ. HyperText Transfer Protocol — протокол передачи гипертекста) — это прикладной протокол передачи данных в сети. Протокол HTTP предполагает использование клиент-серверной структуры передачи данных. Клиентское приложение формирует запрос и отправляет его на сервер, после чего серверное программное обеспечение обрабатывает данный запрос, формирует ответ и передаёт его обратно клиенту. 

HTTPS (от англ. HyperText Transfer Protocol Secure — безопасный протокол передачи гипертекста) — это расширение протокола HTTP, поддерживающее шифрование посредством криптографических протоколов SSL и TLS.

Чем отличаются HTTP от HTTPS:
*передаваемые по протоколу HTTP данные не защищены, HTTPS обеспечивает конфиденциальность информации путем ее шифрования;
*HTTP использует порт 80, HTTPS — порт 443.

3) HTTP методы или HTTP глаголы
Метод запроса указывает на желаемое действие которое выполнится для данного ресурса(URI).
GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.
HEAD запрашивает ресурс(URI) так же, как и метод GET, но без тела ответа.
POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.
PUT заменяет все текущие представления ресурса данными запроса.
DELETE удаляет указанный ресурс.
CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.
OPTIONS используется для описания параметров соединения с ресурсом.
TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.
PATCH используется для частичного изменения ресурса.

4) HTTP статус коды сервера

Представляет собой трехзначное число, где первая цифра означает класс состояния, а последние две цифры не имеют жесткой / определенной классификации.

По классу состояния выделяют 5 групп:
1xx информационный ответ – запрос получен, процесс продолжается; 
2xx успех — запрос успешно получен, понят и принят; 
3xx перенаправление — необходимо предпринять дальнейшие действия для выполнения запроса;
4xx ошибка клиента — запрос содержит неправильный синтаксис или не может быть выполнен;
5xx Ошибка сервера — серверу не удалось выполнить явно допустимый запрос.

HTTP status code — это часть первой строки ответа сервера при запросах по протоколу HTTP.

5) Что такое ядро браузера 
Браузер состоит из оболочки и ядра. Ядро(движок) преобразовывает содержимое веб-страниц (html/css, js, картинки) в привычное интерактивное содержимое на экране. 
Ядро браузера условно можно разделить на две части: движок рендеринга и движок JS.
Движок рендеринга отвечает за получение содержимого веб-страницы (HTML, XML, изображения и т. д.), организацию информации (например, добавление CSS и т. д.) и вычисление режима отображения веб-страницы, а затем вывод на монитор или принтер. 
Разные движки будут по-разному интерпретировать синтаксис веб-страницы, поэтому эффект рендеринга также будет другим. Именно поэтому веб-страницы необходимо тестировать в браузерах разных ядер.

Движок JS отвечает интерпретацию, компиляцию и анализ кода Javascript, т.е выполняет динамические эффекты веб-страницы.

6) Какие браузеры какие ядра используют

Blink: Google
Gecko: Mozilla
WebKit: Apple
EdgeHTML: Microsoft
Presto (pre-Opera kernel) устарело

7) Что такое API
Под API, обычно, подразумевают способ, с помощью которого программы или сервисы могут запрашивать данные у других сервисов.

8. Что такое енд-поинты
Это часть URL (маршрута), которая содержит в себе определенный HTTP метод и может принимать разные параметры.

или 

Эндпоинт — это само обращение к маршруту (URL) отдельным HTTP методом. Эндпоинт выполняют конкретную задачу, принимают параметры и возвращают данные Клиенту.

9) URL (URI, URL, URN)
URL - Uniform Resource Locator (унифицированный определитель местонахождения ресурса)
URN - Unifrorm Resource Name (унифицированное имя ресурса)
URI - Uniform Resource Identifier (унифицированный идентификатор ресурса)
Фактически, URI представляет собой расширенный набор URL-адресов и нечто, называемое URN. Таким образом, мы можем с уверенностью заключить, что все URL являются URI. Однако обратное неверно.
Т.е URI = URL + URN 
URI – имя и адрес ресурса в сети, включает в себя URL и URN
URL – адрес ресурса в сети, определяет местонахождение и способ обращения к нему
URN – имя ресурса в сети, определяет только название ресурса, но не говорит как к нему подключиться
Рассмотрим примеры:

URI – https://wiki.merionet.ru/images/vse-chto-vam-nuzhno-znat-pro-devops/1.png
URL - https://wiki.merionet.ru
URN - images/vse-chto-vam-nuzhno-znat-pro-devops/1.png
ЧТО ТАКОЕ URI?
URI обозначает Uniform Resource Identifier и по сути является последовательностью символов, которая идентифицирует какой-то ресурс. URI может содержать URL и URN.

URI содержит в себе следующие части:

Схема (scheme) - показывает на то, как обращаться к ресурсу, чаще всего это сетевой протокол (http, ftp, ldap)
Иерархическая часть (hier-part) - данные, необходимые для идентификации ресурса (например, адрес сайта)
Запрос (query) - необязательные дополнительные данные ресурса (например, поисковой запрос)
Фрагмент (fragment) – необязательный компонент для идентификации вторичного ресурса ресурса (например, место на странице)
Общий синтаксис URI выглядит так:

URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
ЧТО ТАКОЕ URL?
Теперь, когда мы знаем, что такое URI, URL тоже должен быть достаточно понятным. Всегда помните - URI может содержать URL, но URL указывает только адрес ресурса.

URL содержит следующую информацию:

Протокол, который используется для доступа к ресурсу – http, https, ftp
Расположение сервера с использованием IP-адреса или имени домена - например, wiki.merionet.ru - это имя домена. https://192.168.1.17 - здесь ресурс расположен по указанному IP-адресу
Номер порта на сервере. Например, http://localhost: 8080, где 8080 - это порт.
Точное местоположение в структуре каталогов сервера. Например - https://wiki.merionet.ru/ip-telephoniya/ - это точное местоположение, если пользователь хочет перейти в раздел про телефонию на сайте.
Необязательный идентификатор фрагмента. Например, https://www.google.com/search?ei=qw3eqwe12e1w&q=URL, где q = URL - это строка запроса, введенная пользователем.

Синтаксис:

[protocol]://www.[domain_name]:[port 80]/[path or exaction resource location]?[query]#[fragment]


10) Идемпотентные HTTP методы
GET, HEAD, PUT и DELETE
Метод считается идемпотентным, если после повторения (в т.ч неоднократного) одного и того же запроса, ничего на сервере не изменятся.

Метод POST каждый раз создает новый экземпяр ресурса, поэтому он НЕ идемпотентныйи не безопасный.

11) Безопасные HTTP методы
GET и HEAD, OPTIONS.

Метод HTTP является безопасным, если он ничего не менят на сервере. Как при первом так и при последующем одинаковом запросе. Запрос на сервер ничего не менят так как по сути это операция "только чтение".
 
12) Иденфикация, Аутентификация, Авторизация
Скажем, пользователь хочет войти в свой аккаунт Google. Google подходит лучше всего, потому что там процедура входа явным образом разбита на несколько простейших этапов. Вот что при этом происходит:

Для начала система запрашивает логин, пользователь его указывает, система распознает его как существующий — это идентификация.
После этого Google просит ввести пароль, пользователь его вводит, и система соглашается, что пользователь, похоже, действительно настоящий, раз пароль совпал, — это аутентификация.
Скорее всего, Google дополнительно спросит еще и одноразовый код из SMS или приложения. Если пользователь и его правильно введет, то система окончательно согласится с тем, что он настоящий владелец аккаунта, — это двухфакторная аутентификация.
После этого система предоставит пользователю право читать письма в его почтовом ящике и все в таком духе — это авторизация.
Аутентификация без предварительной идентификации лишена смысла — пока система не поймет, подлинность чего же надо проверять, совершенно бессмысленно начинать проверку. Для начала надо представиться.

Идентификация без аутентификации — это просто глупо. Потому что мало ли кто ввел существующий в системе логин! Системе обязательно надо удостовериться, что этот кто-то знает еще и пароль. Но пароль могли подсмотреть или подобрать, поэтому лучше подстраховаться и спросить что-то дополнительное, что может быть известно только данному пользователю: например, одноразовый код для подтверждения входа.

А вот авторизация без идентификации и тем более аутентификации очень даже возможна. Например, в Google Документах можно публиковать документы так, чтобы они были доступны вообще кому угодно. В этом случае вы как владелец файла увидите сверху надпись, гласящую, что его читает неопознанный енот. Несмотря на то, что енот совершенно неопознанный, система его все же авторизовала — то есть выдала право прочитать этот документ.

А вот если бы вы открыли этот документ для чтения только определенным пользователям, то еноту в таком случае сперва пришлось бы идентифицироваться (ввести свой логин), потом аутентифицироваться (ввести пароль и одноразовый код) и только потом получить право на чтение документа — авторизоваться.
Что еще важно понимать: аутентификация — пожалуй, самый важный из этих процессов с точки зрения безопасности вашего аккаунта. Потому:
*Придумывайте для всех аккаунтов надежные и уникальные пароли. Всегда придет на помощь менеджер паролей. Он же поможет их сгенерировать.
*Обязательно включайте двухфакторную аутентификацию — одноразовые коды в SMS или приложении — во всех сервисах, которые это позволяют. Иначе какой-нибудь неопознанный енот, так или иначе заполучивший ваш пароль, сможет прочитать вашу тайную переписку или сделать что-то еще более неприятное.

13) Что такое IP
IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети. IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть.

По сути, IP-адрес – это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. IP-адреса позволяют различать компьютеры, маршрутизаторы и веб-сайты в интернете и являются важным компонентом работы интернета.
IP-адрес – это строка чисел, разделенных точками. IP-адреса представляют собой набор из четырех чисел, например, 192.158.1.38. Каждое число в этом наборе принадлежит интервалу от 0 до 255. Таким образом, полный диапазон IP-адресации – это адреса от 0.0.0.0 до 255.255.255.255.

IP-адреса не случайны. Они рассчитываются математически и распределяются Администрацией адресного пространства Интернета (Internet Assigned Numbers Authority, IANA), подразделением Корпорации по присвоению имен и номеров в Интернете (Internet Corporation for Assigned Names and Numbers, ICANN). 
14) Что такое октеты в DNS
OCTET = <any 8-bit sequence of data>
Единица информации в 8 бит.
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов
Заголовки HTTP позволяют клиенту и серверу отправлять дополнительную информацию с HTTP запросом или ответом. В HTTP-заголовке содержится не чувствительное к регистру название, а затем после (:) непосредственно значение. Пробелы перед значением игнорируются.
Заголовки могут быть сгруппированы по следующим контекстам:

Основные заголовки применяется как к запросам, так и к ответам, но не имеет отношения к данным, передаваемым в теле.
Заголовки запроса содержит больше информации о ресурсе, который нужно получить, или о клиенте, запрашивающем ресурс.
Заголовки ответа (en-US) содержат дополнительную информацию об ответе, например его местонахождение, или о сервере, предоставившем его.
Заголовки сущности содержат информацию о теле ресурса, например его длину содержимого или тип MIME.
Заголовки также могут быть сгруппированы согласно тому, как прокси (proxies) обрабатывают их:

Connection
Keep-Alive (en-US)
Proxy-Authenticate (en-US)
Proxy-Authorization (en-US)
TE (en-US)
Trailer (en-US)
Transfer-Encoding (en-US)
Upgrade (en-US).
Сквозные заголовки
     Эти заголовки должны быть переданы конечному получателю сообщения: серверу для запроса или клиенту для ответа. Промежуточные прокси-серверы должны повторно передавать эти заголовки без изменений, а кеши должны их хранить.

Хоп-хоп заголовки (Хоп-хоп заголовки)
     Эти заголовки имеют смысл только для одного соединения транспортного уровня и не должны повторно передаваться прокси или кешироваться. Обратите внимание, что с помощью общего заголовка Connection могут быть установлены только заголовки переходов.